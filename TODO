
 - Review https://gitlab.suse.de/security/tools/tree/master and
   especially https://gitlab.suse.de/security/tools/blob/master/bzmass for
   mass filing bugs

 - Add mode to count bug occurences (e.g. parse previous)

 - use test verbosity to also add more details to existing issues but always
   one level less verbose than for new tests

 - check install error when cloned from gitlab w/o tags maybe based on pylibrary cookiecutter template? missing tag is causing version to fail
  - tags added but should also work without, try "bumpversion"? see cookiecutter-pylibrary template

 - offer to automatically post comment on webpage

 - for new issues,
  - offer hints what to do, e.g 'fix the needle', etc.
  - parse and show link (clickable) for browser OR auto-open in browser
  - show detailed fail reason (failed needles are always shown, easy)

 - for fixed issues,
  - also offer link to crosscheck
  - offer to close bug


 - compare architectures against each other, if same test fails for all
   architectures, report as "common issues"


 - consider "build number drift", e.g. some builds have
   i586 and x86_64 and some the corresponding 'arm' tests

 - for further investigation of failed issues
  - compare list of needle candidates for failed needles
   - empty list
   - less needles
   - more needles
   - changed names


 - search for open bugs in bugzilla

  - how to find bugs which only have a test_url which does not specify the
    test module? e.g. if someone only mentions
    https://openqa.opensuse.org/tests/167348/file/autoinst-log.txt


 - diff os-autoinst.txt logfiles, e.g. download and offer wizard like in
   desired user diff editor
  - can skip differing timestamps and near matches, maybe python difflib can
    do this?


 - offer links to
  - autoinst.txt (should be easy, it is the test-url + '/file/autoinst-log.txt', e.g. https://openqa.opensuse.org/tests/167348/file/autoinst-log.txt')
  - the test source code
  - the git changelog of test + openQA + os-autoinst
  - the OBS packages changed during period


 - redirect report to file
 - offer to open urls to failed tests in browser
 - offer to open bugs in bugzilla or just text template (could enter new bugs
   but don't submit yet for review), e.g. based on
   https://bugzilla.suse.com/show_bug.cgi?id=959694
   All fields in bugzilla can be prefilled over the URLâ€“ e.g.
```
https://bugzilla.opensuse.org/enter_bug.cgi?classification=7340&product=openSUSE.org&component=3rd%20party%20software&assigned_to=enter_package_bugowner%40suse.com&short_desc=home%3Aproject%3Aname%2Fpackage-name%3A%20Bug&bug_file_loc=https%3A%2F%2Fopenqa.opensuse.org%2Ftests%2F264648%23step%2Fbootloader%2F11&comment=COMMENT_GOES_HERE%20with%20space%0Aafter%20newline
# also encode urls to include in content
urllib.parse.quote('https://openqa.opensuse.org/tests/264648#step/bootloader/11').replace('/', '%2F')
```
   for SLES 12 SP2 it should be: `product=SUSE%20Linux%20Enterprise%20Server%2012%20SP2`
   also see reference
   http://webmasters.stackexchange.com/questions/31562/extension-to-add-button-report-to-bugzilla
   and for redmine
   http://www.redmine.org/issues/9076, e.g.  http://www.redmine.org/projects/redmine/issues/new?issue[description]=prefilled%20description&issue[custom_field_values][2]=Duplicate

https://progress.opensuse.org/projects/openqatests/issues/new?issue[subject]=[Build%20XXX]%20Test%20foo%20fails&issue[description]=%23%23%20Observation%0AMore%20text


 - template for failed openqa product bugs in wiki
 - improve detection about "new product issue" or "new openqa issue".
   Assumption: If the source code of the test did not change
   (previous->current) AND the needle candidates (or tags) did not change (AND
   maybe the test one step in before also did not change and not fail) THEN a
   failed test is a new product issue
 - compare log output, e.g. see
  - http://stackoverflow.com/questions/6486450/python-compute-list-difference
  - http://stackoverflow.com/questions/3462143/get-difference-between-two-lists
  - https://pypi.python.org/pypi/fuzzywuzzy
  - http://streamhacker.com/2011/10/31/fuzzy-string-matching-python/
  - http://chairnerd.seatgeek.com/fuzzywuzzy-fuzzy-string-matching-in-python/
  - http://marcobonzanini.com/2015/02/25/fuzzy-string-matching-in-python/
    - http://stackoverflow.com/questions/2923420/what-is-a-simple-fuzzy-string-matching-algorithm-in-python

